using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using System.Threading.Tasks;
using Autodesk.Revit.DB;
using Autodesk.Revit.ApplicationServices;
using Autodesk.Revit.Attributes;
using Autodesk.Revit.UI;
using Autodesk.Revit.UI.Selection;

namespace CopyParameters
{
    [Transaction(TransactionMode.Manual)]
    [Regeneration(RegenerationOption.Manual)]

    public class sop_CopyParameters : IExternalCommand
    {
        
        public Result Execute(ExternalCommandData commandData, ref string message, ElementSet elements)
        {
            //Get application and documetn objects
            UIApplication uiapp = commandData.Application;
            UIDocument uidoc = uiapp.ActiveUIDocument;
            Document doc = uidoc.Document;
            Application app = uiapp.Application;            

            /* Element a = SelectElement(uidoc, doc);
             Element e = SelectElement(uidoc, doc);
             Parameter parameter = a.get_Parameter(BuiltInParameter.WALL_BASE_OFFSET);
             Parameter parameter1 = a.get_Parameter(BuiltInParameter.WALL_BASE_CONSTRAINT);
             Parameter parameter2 = e.get_Parameter(BuiltInParameter.WALL_BASE_OFFSET);
             Parameter parameter3 = e.get_Parameter(BuiltInParameter.WALL_BASE_CONSTRAINT);

             string test = parameter1.AsValueString();
             string test1 = parameter.AsValueString();
             string test2 = test +" Versatz unten - "+ test1;
            */
                      

            using (Transaction t = new Transaction(doc, "sop_Wand_CopyEbene"))
            {
                t.Start("sop_Wand_CopyEbene");
                try
                {

                    //*****************Select Element*************************

                    Reference pickedref = null;
                    Selection sel = uiapp.ActiveUIDocument.Selection;
                    WallPickFilter selFilter = new WallPickFilter();
                    pickedref = sel.PickObject(ObjectType.Element, selFilter, "Please select a wall");
                    Element elem = uidoc.Document.GetElement(pickedref);

                    

                    // Ask the user to pick target rooms 
                    
                    WallPickFilter wallPickFilter = new WallPickFilter();
                    IList<Reference> walls = sel.PickObjects(ObjectType.Element, wallPickFilter, "Wählen Sie Wände die Sie anpassen wollen");
                    //Reference Targetwall = sel.PickObject(ObjectType.Element, wallPickFilter, "Wählen Sie Wände die Sie anpassen wollen");
                    //Element TarWall = uidoc.Document.GetElement(Targetwall);

                    //Get Parameter

                    Parameter wallBaseOffset = elem.get_Parameter(BuiltInParameter.WALL_BASE_OFFSET);
                    Parameter wallTopOffset = elem.get_Parameter(BuiltInParameter.WALL_TOP_OFFSET);
                    Parameter wallLevelBaseOffset = elem.get_Parameter(BuiltInParameter.WALL_BASE_CONSTRAINT);
                    Parameter wallLevelTopOffset = elem.get_Parameter(BuiltInParameter.WALL_HEIGHT_TYPE);
                    Parameter wallManuellOffset = elem.get_Parameter(BuiltInParameter.WALL_USER_HEIGHT_PARAM);

                    //Get Parameter Target Object
                    /*
                    Parameter targetBaseOffset = TarWall.get_Parameter(BuiltInParameter.WALL_BASE_OFFSET);
                    Parameter targetTopOffset = TarWall.get_Parameter(BuiltInParameter.WALL_TOP_OFFSET);
                    Parameter targetLevelBaseOffset = TarWall.get_Parameter(BuiltInParameter.WALL_BASE_CONSTRAINT);
                    Parameter targetLevelTopOffset = TarWall.get_Parameter(BuiltInParameter.WALL_HEIGHT_TYPE);
                    Parameter targetManuellOffset = TarWall.get_Parameter(BuiltInParameter.WALL_USER_HEIGHT_PARAM);
                    */

                    //Get Parameter by multiple Object
                    
                    foreach (Reference w in walls)
                     {
                        Element TarWall = uidoc.Document.GetElement(w);
                        Parameter targetBaseOffset = TarWall.get_Parameter(BuiltInParameter.WALL_BASE_OFFSET);
                        Parameter targetTopOffset = TarWall.get_Parameter(BuiltInParameter.WALL_TOP_OFFSET);
                        Parameter targetLevelBaseOffset = TarWall.get_Parameter(BuiltInParameter.WALL_BASE_CONSTRAINT);
                        Parameter targetLevelTopOffset = TarWall.get_Parameter(BuiltInParameter.WALL_HEIGHT_TYPE);
                        Parameter targetManuellOffset = TarWall.get_Parameter(BuiltInParameter.WALL_USER_HEIGHT_PARAM);

                        targetBaseOffset.SetValueString(GetParameterValue(wallBaseOffset));
                        targetLevelBaseOffset.Set(wallLevelBaseOffset.AsElementId());
                        targetLevelTopOffset.Set(wallLevelTopOffset.AsElementId());

                        if (targetManuellOffset.UserModifiable == false)
                        {
                            targetManuellOffset.SetValueString(GetParameterValue(wallManuellOffset));

                        }
                        else
                        {

                            targetTopOffset.SetValueString(GetParameterValue(wallTopOffset));
                        }

                    }





                    //Set parameter                   
                    /*
                    targetBaseOffset.SetValueString(GetParameterValue(wallBaseOffset));
                    
                    targetLevelBaseOffset.Set(wallLevelBaseOffset.AsElementId());
                    targetLevelTopOffset.Set(wallLevelTopOffset.AsElementId());
                    

                    if (targetManuellOffset.UserModifiable == false)
                    {                     
                            targetManuellOffset.SetValueString(GetParameterValue(wallManuellOffset));
                       
                    }
                    else
                    {

                        targetTopOffset.SetValueString(GetParameterValue(wallTopOffset));
                    }

                    */




                    /*


                    string result = "Neue Werte : " + "\n";

                    result += "Versatz Unten - " + targetBaseOffset.AsValueString() + "\n";
                    
                     
                    result += "Versatz Unten - " + targetBaseOffset.AsValueString() + "\n";                   
                    result += "Versatz Oben - " + targetTopOffset.AsValueString() + "\n";
                    result += "Abhängigkeit unten - " + targetLevelBaseOffset.AsValueString() + "\n";
                    result += "Abhängigkeit Oben - " + targetLevelTopOffset.AsValueString() + "\n";
                    result += "Nicht verknüpfte Höhe - " + targetManuellOffset.AsValueString() + "\n";
                    */



                    //parameter.Set(GetParameterValue(parameter));
                    //parameter3.SetValueString(GetParameterValue(parameter1));

                    //ShowBasicElementInfo(TarWall);
                    //TaskDialog.Show("New Value", result);
                    

                }
                catch ( Autodesk.Revit.Exceptions.OperationCanceledException )
                {
                    return Result.Cancelled;
                }
                catch (Exception ex)
                {
                    message = ex.Message;
                    return Result.Failed;
                }

                t.Commit();
                
                //TaskDialog.Show("New Value", GetParameterValue();
                //TaskDialog.Show("New Value", GetParameterValue(parameter2));
                //TaskDialog.Show("New Value", GetParameterValue(parameter3));

                

            }

            return Result.Succeeded;

        }
      

        //*****************GetParameterValue*************************
        public string GetParameterValue(Parameter parameter)
        {
            switch (parameter.StorageType)
            {
                case StorageType.Double:
                    //get value with unit, AsDouble() can got vale without unit
                    return parameter.AsValueString();
                case StorageType.ElementId:
                    return parameter.AsElementId().IntegerValue.ToString();
                case StorageType.Integer:
                    //get value with unit, AsInteger() can got value without unit
                    return parameter.AsValueString();
                case StorageType.None:
                    return parameter.AsValueString();
                case StorageType.String:
                    return parameter.AsString();
                default:
                    return "";
            }
        }

        // **********************Selection Filter***************************
        public class WallPickFilter : ISelectionFilter
        {
            public bool AllowElement(Element e)
            {
                return e.Category.Id.IntegerValue.Equals((int)BuiltInCategory.OST_Walls);
            }
            public bool AllowReference(Reference r, XYZ p)
            {
                return false;
            }

        }
        public void PickObj(Document doc, IList<Reference> walls)
        {
            foreach (Reference w in walls)
            {
                Element wall = doc.GetElement(w);

            }
        }
     

    }
}
