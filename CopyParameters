using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using System.Threading.Tasks;
using Autodesk.Revit.DB;
using Autodesk.Revit.ApplicationServices;
using Autodesk.Revit.Attributes;
using Autodesk.Revit.UI;
using Autodesk.Revit.UI.Selection;

namespace CopyParameters
{
    [Transaction(TransactionMode.Manual)]
    [Regeneration(RegenerationOption.Manual)]

    public class sop_CopyParameters : IExternalCommand
    {
        
        public Result Execute(ExternalCommandData commandData, ref string message, ElementSet elements)
        {
            //Get application and documetn objects
            UIApplication uiapp = commandData.Application;
            UIDocument uidoc = uiapp.ActiveUIDocument;
            Document doc = uidoc.Document;
            Application app = uiapp.Application;          
  

            using (Transaction t = new Transaction(doc, "sop_CopyParameters"))
            {
                t.Start("sop_Wand_CopyParameters");
                try
                {

                    //*****************Select Element*************************

                    Reference pickedref = null;
                    Selection sel = uiapp.ActiveUIDocument.Selection;
                    pickedref = sel.PickObject(ObjectType.Element, "Please select an element");
                    Element elem = uidoc.Document.GetElement(pickedref);
                    

                    // pick target elements 

                    IList<Reference> refSet = sel.PickObjects(ObjectType.Element, "WÃ¤hlen Sie Elementen");


                    //Get and Set Parameter
                    string Dialogmessage = "";

                    IList<Parameter> paramSet = elem.GetOrderedParameters();

                    foreach (Parameter param in paramSet)
                    {
                        if (param.Definition.Name.Contains("sop_"))
                        {                           
                            
                            string name = param.Definition.Name;
                            string val = GetParameterValue(param);
                            double DoubleVal = GetParameterDoubleValue(param);
                            int id = param.Id.IntegerValue;
                            //int Count = 0;
                            try
                            {
                                foreach (Reference r in refSet)
                                {
                                    
                                    Element elemSet = uidoc.Document.GetElement(r);
                                    Parameter targetParam = elemSet.get_Parameter((BuiltInParameter)id);
                                    string targetname = targetParam.Definition.Name;
                                    string targetval = GetParameterValue(targetParam);                                   
                                    
                                    targetParam.Set(val);
                                    targetParam.Set(DoubleVal);
                                    
                                    

                                    //Count++;
                                    //Dialogmessage += Count + ".Element - " + targetname + " = " + val + "\n";
                                    
                                }
                                Dialogmessage += name+"\n";

                            }
                            catch (Autodesk.Revit.Exceptions.OperationCanceledException)
                            {
                                continue;
                            }
                            catch(Exception ex)
                            {
                                continue;
                            }
                            
                        }
                        
                    }
                    TaskDialog.Show("Neue Werte", Dialogmessage);
                }
                catch (Autodesk.Revit.Exceptions.OperationCanceledException)
                {
                    return Result.Cancelled;
                }
                catch (Exception ex)
                {
                    message = ex.Message;
                    return Result.Failed;
                }

                t.Commit();               

            }

            return Result.Succeeded;

        }     

        //*****************GetParameterValue*************************
        public string GetParameterValue(Parameter parameter)
        {
            switch (parameter.StorageType)
            {
                case StorageType.Double:
                    //get value with unit, AsDouble() can got vale without unit
                    return parameter.AsValueString();
                case StorageType.ElementId:
                    return parameter.AsElementId().IntegerValue.ToString();
                case StorageType.Integer:
                    //get value with unit, AsInteger() can got value without unit
                    return parameter.AsValueString();                    
                case StorageType.None:
                    return parameter.AsValueString();
                case StorageType.String:
                    return parameter.AsString();
                default:
                    return "";
            }
        }
        public double GetParameterDoubleValue(Parameter parameter)
        {
            switch (parameter.StorageType)
            {
                case StorageType.Double:
                    //get value with unit, AsDouble() can got vale without unit
                    return parameter.AsDouble();
                case StorageType.ElementId:
                    return parameter.AsElementId().IntegerValue;
                case StorageType.Integer:
                    //get value with unit, AsInteger() can got value without unit
                    return parameter.AsInteger();
                case StorageType.None:
                    return parameter.AsDouble();
                case StorageType.String:
                    return parameter.AsDouble();
                default:
                    return 0;
            }
        }
    }
}
